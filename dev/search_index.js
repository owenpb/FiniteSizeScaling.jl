var documenterSearchIndex = {"docs":
[{"location":"demo_2/#Demo-2:-Two-parameter-scaling","page":"Demo 2: Two-parameter scaling","title":"Demo 2: Two-parameter scaling","text":"","category":"section"},{"location":"example_page/#Example:-Holstein-model","page":"Example: Holstein model","title":"Example: Holstein model","text":"","category":"section"},{"location":"example_page/","page":"Example: Holstein model","title":"Example: Holstein model","text":"The Holstein model is a simple tight-binding description of the electron-phonon interaction. On the square lattice, it exhibits a phase transition to charge density wave (CDW) order as the temperature is lowered, with the transition belonging to the 2D Ising universality class.  The measurement used to detect CDW order is the charge structure factor, which is the Fourier transform of the density-density correlation function:","category":"page"},{"location":"example_page/","page":"Example: Holstein model","title":"Example: Holstein model","text":"S(mathbfq) = frac1N sum_mathbfi mathbfj e^i mathbfq cdot (mathbfi - mathbfj) langle n_mathbfi n_mathbfj rangle","category":"page"},{"location":"example_page/","page":"Example: Holstein model","title":"Example: Holstein model","text":"where mathbfi and  mathbfj denote sites of the lattice, and n_mathbfi is the electron density at site mathbfi. When the CDW forms on the square lattice, electrons pair up and form a periodic \"checkerboard\" pattern consisting of alternating empty and doubly occupied sites. This is signaled by a peak in S(q) at the CDW ordering wavevector, which in this case is (pi pi). We therefore define the order parameter S_cdw = S(pi pi) which should grow rapidly below a critical temperature T_c. In particular, when long-range CDW order emerges, the order parameter S_cdw becomes sensitive to the finite size of the system, and thus below T_c should grow in proportion to the number of lattice sites N=L^2.","category":"page"},{"location":"example_page/","page":"Example: Holstein model","title":"Example: Holstein model","text":"(Image: Raw data)","category":"page"},{"location":"example_page/","page":"Example: Holstein model","title":"Example: Holstein model","text":"Generally, near a phase transition, physical quantities (such as the order parameter S_cdw) should scale with the reduced temperature t=(T-T_c)T_c raised to the power of some critical exponent. The correlation length xi in turn scales with t to the power of some critical exponent. However, for a finite size system, the more relevant length scale becomes the linear dimension L of the lattice. In this case, S_cdw should scale as some power of L multiplied by a function of the ratio Lxi. This is the scaling hypothesis, and forms the basis of the finite size scaling approach.","category":"page"},{"location":"example_page/","page":"Example: Holstein model","title":"Example: Holstein model","text":"For the square lattice Holstein model, the CDW transition breaks a Z_2 symmetry and thus belongs to the 2D Ising universality class, which has known critical exponents eta = 14 and nu = 1. Approaching the phase transition, the order parameter should scale as S_cdw sim L^2 - eta f(t L^1nu). Therefore if we plot:","category":"page"},{"location":"example_page/","page":"Example: Holstein model","title":"Example: Holstein model","text":"S_cdw L^-74 quad vs quad (beta - beta_c)L","category":"page"},{"location":"example_page/","page":"Example: Holstein model","title":"Example: Holstein model","text":"for different lattice sizes, the data should collapse onto a universal curve, allowing one to determine an estimate of the critical temperature beta_c = 1T_c. Below we show the data collapse for the square lattice Holstein model setting beta_c = 6 and using the Ising critical exponents.","category":"page"},{"location":"example_page/","page":"Example: Holstein model","title":"Example: Holstein model","text":"(Image: Scaled data)","category":"page"},{"location":"example_page/","page":"Example: Holstein model","title":"Example: Holstein model","text":"This package includes a number of methods for performing finite size scaling and for plotting results. In Demo 1, we show how to perform one-parameter scaling to find the optimal value of beta_c which produces the best data collapse for the square lattice Holstein model. In Demo 2, we show how two-parameter scaling can be performed by assuming the exponent 2-eta is unknown, and finding the optimal values of both beta_c and 2-eta which produce the best data collapse. ","category":"page"},{"location":"example_page/","page":"Example: Holstein model","title":"Example: Holstein model","text":"Note: The data used in these demos is provided in the examples folder of this package. This example data can be imported via:","category":"page"},{"location":"example_page/","page":"Example: Holstein model","title":"Example: Holstein model","text":"include(\"examples/ExampleData.jl\");\nimport .ExampleData.example_data_with_error\nimport .ExampleData.example_data_no_error\nimport .ExampleData.example_fit_weights","category":"page"},{"location":"demo_1/#Demo-1:-One-parameter-scaling","page":"Demo 1: One-parameter scaling","title":"Demo 1: One-parameter scaling","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"CurrentModule = FiniteSizeScaling","category":"page"},{"location":"methods/#Methods","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"A list of all available methods in the FiniteSizeScaling module.","category":"page"},{"location":"methods/","page":"Methods","title":"Methods","text":"Modules = [FiniteSizeScaling]","category":"page"},{"location":"methods/","page":"Methods","title":"Methods","text":"Modules = [FiniteSizeScaling]","category":"page"},{"location":"methods/#FiniteSizeScaling.fss_one_var-Tuple{}","page":"Methods","title":"FiniteSizeScaling.fss_one_var","text":"fss_one_var(; data::AbstractVector, xs::Function, ys::Function, v1i::Real, v1f::Real, n1::Int, p::Int, weights::AbstractArray=nothing, norm_y::Bool=false, verbose::Bool=true)\n\nPerforms finite size scaling with one optimized parameter v1.\n\nArguments:\n\ndata::AbstractVector: An array of input data, where each element is an array of [X, Y, E, L] data for a given lattice size (error E optional). The length of data should equal the number of lattice sizes.\nxs::Function: A function of the variables (X, L, v1) which specifies how the data is to be scaled horizontally.\nys::Function: A function of the variables (Y, L, v1) which specifies how the data is to be scaled vertically.\nv1i::Real: Initial value of v1 used in the search for optimal fit.\nv1f::Real: Final value of v1 used in the search for optimal fit.\nn1::Int: Number of v1 values used in the search for optimal fit.\np::Int: Degree of polynomial used in the fitting.\nweights::AbstractVector: An optional array of weight data, where each element is an array of [W] data for a given lattice size. The length of weights should equal the number of lattice sizes. These weights multiply the squared residuals when performing the fit, and are typically inverse variances (1./ (E.^2)) for weighted least-squares.\nnorm_y::Bool: If true, each residual calculated (when evaluating the fit) is divided by the y-value of the data point. Recommended if scaling v1 changes the y-axis scale.\nverbose:Bool: If true, prints the optimal v1 value and the magnitude of the smallest residual.\n\nReturns:\n\nscaled_data_array: An array of scaled data, where each element is an array of [Xs, Ys, E, L] data for a given lattice size (error E optional). The length of scaled_data_array should equal the number of lattice sizes.\nresiduals: An array of length n1 with values of the sum of squared residuals for each value of v1 used in the search.\nmin_res: The smallest value of the sum of squared residuals found in the search.\nbest_v1: The optimal value of v1 found in the search.\n\n\n\n\n\n","category":"method"},{"location":"methods/#FiniteSizeScaling.fss_two_var-Tuple{}","page":"Methods","title":"FiniteSizeScaling.fss_two_var","text":"fss_two_var(; data::AbstractVector, xs::Function, ys::Function, v1i::Real, v1f::Real, n1::Int, v2i::Real, v2f::Real, n2::Int, p::Int, weights::AbstractArray=nothing, norm_y::Bool=false, verbose::Bool=true)\n\nPerforms finite size scaling with two optimized parameters v1 and v2.\n\nArguments:\n\ndata::AbstractVector: An array of input data, where each element is an array of [X, Y, E, L] data for a given lattice size (error E optional). The length of data should equal the number of lattice sizes.\nxs::Function: A function of the variables (X, L, v1, v2) which specifies how the data is to be scaled horizontally.\nys::Function: A function of the variables (Y, L, v1, v2) which specifies how the data is to be scaled vertically.\nv1i::Real: Initial value of v1 used in the search for optimal fit.\nv1f::Real: Final value of v1 used in the search for optimal fit.\nn1::Int: Number of v1 values used in the search for optimal fit.\nv2i::Real: Initial value of v2 used in the search for optimal fit.\nv2f::Real: Final value of v2 used in the search for optimal fit.\nn2::Int: Number of v2 values used in the search for optimal fit.\np::Int: Degree of polynomial used in the fitting.\nweights::AbstractArray: An optional array of weight data, where each element is an array of [W] data for a given lattice size. The length of weights should equal the number of lattice sizes. These weights multiply the squared residuals when performing the fit, and are typically inverse variances (1./ (E.^2)) for weighted least-squares.\nnorm_y::Bool: If true, each residual calculated (when evaluating the fit) is divided by the y-value of the data point. Recommended if scaling v1 changes the y-axis scale.\nverbose::Bool: If true, prints the optimal v1 value and the magnitude of the smallest residual.\n\nReturns:\n\nscaled_data_array: An array of scaled data, where each element is an array of [Xs, Ys, E, L] data for a given lattice size (error E optional). The length of scaled_data_array should equal the number of lattice sizes.\nresiduals: An array of dimensions (n2, n1) with values of the sum of squared residuals for each pair of (v2, v1) values used in the search.\nmin_res: The smallest value of the sum of squared residuals found in the search.\nbest_v1: The optimal value of v1 found in the search.\nbest_v2: The optimal value of v2 found in the search.\n\n\n\n\n\n","category":"method"},{"location":"methods/#FiniteSizeScaling.plot_contour-Tuple{AbstractArray}","page":"Methods","title":"FiniteSizeScaling.plot_contour","text":"plot_contour(residuals::AbstractArray; v1i::Real, v1f::Real, n1::Int, v2i::Real, v2f::Real, n2::Int, levels, fill::Bool=true, logspace::Bool=true, xlabel::AbstractString=L\"$v_1$\", ylabel::AbstractString=L\"$v_2$\", xguidefontsize::Real=16, yguidefontsize::Real=16, xtickfontsize::Real=10, ytickfontsize::Real=10, color::Symbol=:algae, markershape::Symbol=:star4, markersize::Real=6, markercolor::Symbol=:yellow, size::Tuple=(800,500))\n\nProduces a contour plot showing the sum of squared residuals as a function of v1 (x-axis) and v2 (y-axis) after two-parameter scaling has been performed using fss_two_var. The optimal values of v1 and v2 are indicated on the plot.    \n\nArguments:\n\nresiduals::AbstractArray: Two-dimensional array of residual values obtained after two-parameter fit has been performed. This is the array residuals returned by the function fss_two_var.\nv1i::Real: Initial value of v1 used in the search for optimal fit. Should be the same value used when calling the function fss_two_var.\nv1f::Real: Final value of v1 used in the search for optimal fit. Should be the same value used when calling the function fss_two_var.\nn1::Int: Number of v1 values used in the search for optimal fit. Should be the same value used when calling the function fss_two_var.\nlevels: Can be an integer or an array. If an integer, this specfies the number of contour lines drawn. If an array, contour lines are drawn at the exact levels specified in the array.\nfill::Bool: If true, fills in the contour plot with solid color.\nlogspace::Bool If true, contour lines are spaced logarithmically. Recommended if a higher density of contour lines near the minima is desired.\nxlabel::AbstractString: Label for the horizontal axis. Can be a LaTexString e.g. L\"x\".\nylabel::AbstractString: Label for the vertical axis. Can be a LaTexString e.g. L\"y\". \nxguidefontsize::Real: Font size for x-axis label.\nyguidefontsize::Real: Font size for y-axis label.\nxtickfontsize::Real: Font size for x-axis ticks.\nytickfontsize::Real: Font size for y-axis ticks.\ncolor::Symbol: Color scheme used in contour plot. Symbol can be any color scheme supported by Plots.jl.\nmarkershape::Symbol: Shape of marker used to pinpoint the optimal parameter values. Can be any markershape Symbol defined in Plots.jl.\nmarkersize::Real: Size of marker used to pinpoint the optimal parameter values. \nmarkercolor::Symbol: Color of marker used to pinpoint the optimal parameter values. Can be any markercolor Symbol defined in Plots.jl.\nsize::Tuple: Size of contour plot drawn.\n\n\n\n\n\n","category":"method"},{"location":"methods/#FiniteSizeScaling.plot_data-Tuple{AbstractArray}","page":"Methods","title":"FiniteSizeScaling.plot_data","text":"plot_data(data::AbstractArray; xlabel::AbstractString=L\"$x$\", ylabel::AbstractString=L\"$y$\", xguidefontsize::Real=16, yguidefontsize::Real=16, xtickfontsize::Real=10, ytickfontsize::Real=10, legend::Symbol=:topleft, legendfontsize::Real=10, markershape::Symbol=:circle, markersize::Real=4, palette::Symbol=:tab10, size::Tuple=(600,400))\n\nPlots the data (either the unscaled data, or the optimal collapse of scaled data) for different lattice sizes. \n\nArguments:\n\ndata::AbstractArray: An array of input data, where each element is an array of [X, Y, E, L] data for a given lattice size (error E optional). The length of data should equal the number of lattice sizes. This could be the scaled_data_array returned by fss_one_var or fss_two_var, giving a plot of the best data collapse.\nxlabel::AbstractString: Label for the horizontal axis. Can be a LaTexString e.g. L\"x\".\nylabel::AbstractString: Label for the vertical axis. Can be a LaTexString e.g. L\"y\". \nxguidefontsize::Real: Font size for x-axis label.\nyguidefontsize::Real: Font size for y-axis label.\nxtickfontsize::Real: Font size for x-axis ticks.\nytickfontsize::Real: Font size for y-axis ticks.\nlegend::Symbol: Position of legend. Can be any legend Symbol defined in Plots.jl.\nlegendfontsize::Real: Font size used in legend.\nmarkershape::Symbol: Shape of markers used in scatter plot. Can be any markershape Symbol defined in Plots.jl.\nmarkersize::Real: Size of markers used in scatter plot.\npalette::Symbol: Color scheme used in scatter plot. Symbol can be any color scheme supported by Plots.jl.\nsize::Tuple: Dimensions of scatter plot drawn.\n\n\n\n\n\n","category":"method"},{"location":"methods/#FiniteSizeScaling.plot_residuals-Tuple{AbstractVector}","page":"Methods","title":"FiniteSizeScaling.plot_residuals","text":"plot_residuals(data::AbstractArray; xlabel::AbstractString=L\"$x$\", ylabel::AbstractString=L\"$y$\", xguidefontsize::Real=16, yguidefontsize::Real=16, xtickfontsize::Real=10, ytickfontsize::Real=10, legend::Symbol=:topleft, legendfontsize::Real=10, markershape::Symbol=:circle, markersize::Real=4, palette::Symbol=:tab10, size::Tuple=(600,400))\n\nPlots the sum of squared residuals (calculated with fss_one_var) as a function of v1, after one-parameter scaling has been performed. \n\nArguments:\n\nresiduals::AbstractVector: A vector containing values of the sum of squared residuals for each v1 value used in the optimization search. This is the vector residuals returned by the fss_one_var function.\nv1i::Real: Initial value of v1 used in the search for optimal fit. Should be the same value used when calling the function fss_one_var.\nv1f::Real: Final value of v1 used in the search for optimal fit. Should be the same value used when calling the function fss_one_var.\nn1::Int: Number of v1 values used in the search for optimal fit. Should be the same value used when calling the function fss_one_var.\nxlabel::AbstractString: Label for the horizontal axis. Can be a LaTexString e.g. L\"x\".\nylabel::AbstractString: Label for the vertical axis. Can be a LaTexString e.g. L\"y\". \nxguidefontsize::Real: Font size for x-axis label.\nyguidefontsize::Real: Font size for y-axis label.\nxtickfontsize::Real: Font size for x-axis ticks.\nytickfontsize::Real: Font size for y-axis ticks.\nmarkershape::Symbol: Shape of markers used in plot. Can be any markershape Symbol defined in Plots.jl.\nmarkercolor::Symbol: Color of markers used in plot. Can be markercolor Symbol defined in Plots.jl.\nmarkersize::Real: Size of markers used in plot.\nlinewidth::Real: Width of line used in plot.\nlinecolor::Symbol: Color of line used in plot. Symbol can be any linecolor Symbol defined in Plots.jl.\nsize::Tuple: Dimensions of scatter plot drawn.\n\n\n\n\n\n","category":"method"},{"location":"#FiniteSizeScaling.jl","page":"Home","title":"FiniteSizeScaling.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for FiniteSizeScaling.jl: a Julia package for finite-size scaling analysis. Uses finite-size scaling to find optimized values of critical exponents and phase transition temperatures given data for finite-size lattices.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To get started, see the Examples page for a brief overview of the finite-size scaling method as applied to the Holstein model. Then see Demo 1 for a tutorial on using the package for optimizing one scaling parameter to obtain the best data collapse, and Demo 2 for an overview of how to optimize two scaling parameters.","category":"page"}]
}
